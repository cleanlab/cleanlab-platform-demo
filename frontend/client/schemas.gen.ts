// @ts-nocheck
// This file is auto-generated by @hey-api/openapi-ts

export const EvalLogSchema = {
  properties: {
    explanation: {
      anyOf: [
        {
          type: 'string'
        },
        {
          type: 'null'
        }
      ],
      title: 'Explanation'
    }
  },
  type: 'object',
  title: 'EvalLog'
} as const

export const EvalResultSchema = {
  properties: {
    score: {
      anyOf: [
        {
          type: 'number'
        },
        {
          type: 'null'
        }
      ],
      title: 'Score'
    },
    triggered: {
      anyOf: [
        {
          type: 'boolean'
        },
        {
          type: 'null'
        }
      ],
      title: 'Triggered'
    },
    triggered_escalation: {
      anyOf: [
        {
          type: 'boolean'
        },
        {
          type: 'null'
        }
      ],
      title: 'Triggered Escalation'
    },
    triggered_guardrail: {
      anyOf: [
        {
          type: 'boolean'
        },
        {
          type: 'null'
        }
      ],
      title: 'Triggered Guardrail'
    },
    log: {
      anyOf: [
        {
          $ref: '#/components/schemas/EvalLog'
        },
        {
          type: 'null'
        }
      ]
    }
  },
  type: 'object',
  title: 'EvalResult'
} as const

export const HTTPValidationErrorSchema = {
  properties: {
    detail: {
      items: {
        $ref: '#/components/schemas/ValidationError'
      },
      type: 'array',
      title: 'Detail'
    }
  },
  type: 'object',
  title: 'HTTPValidationError'
} as const

export const Message_InputSchema = {
  properties: {
    role: {
      $ref: '#/components/schemas/MessageRole'
    },
    content: {
      type: 'string',
      title: 'Content'
    },
    metadata: {
      $ref: '#/components/schemas/MessageMetadata-Input'
    }
  },
  type: 'object',
  required: ['role', 'content'],
  title: 'Message'
} as const

export const Message_OutputSchema = {
  properties: {
    role: {
      $ref: '#/components/schemas/MessageRole'
    },
    content: {
      type: 'string',
      title: 'Content'
    },
    metadata: {
      $ref: '#/components/schemas/MessageMetadata-Output'
    }
  },
  type: 'object',
  required: ['role', 'content'],
  title: 'Message'
} as const

export const MessageMetadata_InputSchema = {
  properties: {
    original_llm_response: {
      anyOf: [
        {
          type: 'string'
        },
        {
          type: 'null'
        }
      ],
      title: 'Original Llm Response'
    },
    is_expert_answer: {
      anyOf: [
        {
          type: 'boolean'
        },
        {
          type: 'null'
        }
      ],
      title: 'Is Expert Answer'
    },
    guardrailed: {
      anyOf: [
        {
          type: 'boolean'
        },
        {
          type: 'null'
        }
      ],
      title: 'Guardrailed'
    },
    escalated_to_sme: {
      anyOf: [
        {
          type: 'boolean'
        },
        {
          type: 'null'
        }
      ],
      title: 'Escalated To Sme'
    },
    scores: {
      anyOf: [
        {
          additionalProperties: {
            $ref: '#/components/schemas/EvalResult'
          },
          type: 'object'
        },
        {
          type: 'null'
        }
      ],
      title: 'Scores'
    }
  },
  type: 'object',
  title: 'MessageMetadata'
} as const

export const MessageMetadata_OutputSchema = {
  properties: {
    original_llm_response: {
      anyOf: [
        {
          type: 'string'
        },
        {
          type: 'null'
        }
      ],
      title: 'Original Llm Response'
    },
    is_expert_answer: {
      anyOf: [
        {
          type: 'boolean'
        },
        {
          type: 'null'
        }
      ],
      title: 'Is Expert Answer'
    },
    guardrailed: {
      anyOf: [
        {
          type: 'boolean'
        },
        {
          type: 'null'
        }
      ],
      title: 'Guardrailed'
    },
    escalated_to_sme: {
      anyOf: [
        {
          type: 'boolean'
        },
        {
          type: 'null'
        }
      ],
      title: 'Escalated To Sme'
    },
    scores: {
      anyOf: [
        {
          additionalProperties: {
            $ref: '#/components/schemas/EvalResult'
          },
          type: 'object'
        },
        {
          type: 'null'
        }
      ],
      title: 'Scores'
    }
  },
  type: 'object',
  title: 'MessageMetadata'
} as const

export const MessageRoleSchema = {
  type: 'string',
  enum: ['user', 'assistant'],
  title: 'MessageRole'
} as const

export const ValidationErrorSchema = {
  properties: {
    loc: {
      items: {
        anyOf: [
          {
            type: 'string'
          },
          {
            type: 'integer'
          }
        ]
      },
      type: 'array',
      title: 'Location'
    },
    msg: {
      type: 'string',
      title: 'Message'
    },
    type: {
      type: 'string',
      title: 'Error Type'
    }
  },
  type: 'object',
  required: ['loc', 'msg', 'type'],
  title: 'ValidationError'
} as const
