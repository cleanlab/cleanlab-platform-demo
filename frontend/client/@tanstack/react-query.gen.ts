// @ts-nocheck
// @ts-nocheck
// This file is auto-generated by @hey-api/openapi-ts

import type { Options } from '@hey-api/client-axios'
import { queryOptions, type UseMutationOptions } from '@tanstack/react-query'
import type {
  ChatApiChatPostData,
  ChatApiChatPostError,
  ChatApiChatPostResponse
} from '../types.gen'
import type { AxiosError } from 'axios'
import { client, chatApiChatPost } from '../services.gen'

type QueryKey<TOptions extends Options> = [
  Pick<TOptions, 'baseURL' | 'body' | 'headers' | 'path' | 'query'> & {
    _id: string
    _infinite?: boolean
  }
]

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean
): QueryKey<TOptions>[0] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseURL: (options?.client ?? client).getConfig().baseURL
  } as QueryKey<TOptions>[0]
  if (infinite) {
    params._infinite = infinite
  }
  if (options?.body) {
    params.body = options.body
  }
  if (options?.headers) {
    params.headers = options.headers
  }
  if (options?.path) {
    params.path = options.path
  }
  if (options?.query) {
    params.query = options.query
  }
  return params
}

export const chatApiChatPostQueryKey = (
  options: Options<ChatApiChatPostData>
) => [createQueryKey('chatApiChatPost', options)]

export const chatApiChatPostOptions = (
  options: Options<ChatApiChatPostData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await chatApiChatPost({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: chatApiChatPostQueryKey(options)
  })
}

export const chatApiChatPostMutation = (
  options?: Partial<Options<ChatApiChatPostData>>
) => {
  const mutationOptions: UseMutationOptions<
    ChatApiChatPostResponse,
    AxiosError<ChatApiChatPostError>,
    Options<ChatApiChatPostData>
  > = {
    mutationFn: async localOptions => {
      const { data } = await chatApiChatPost({
        ...options,
        ...localOptions,
        throwOnError: true
      })
      return data
    }
  }
  return mutationOptions
}
